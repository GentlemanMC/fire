package dev.zprestige.fire.module.exploit.choruspredict

import dev.zprestige.fire.event.bus.EventListener
import dev.zprestige.fire.module.Descriptor
import dev.zprestige.fire.module.Module
import dev.zprestige.fire.settings.impl.ColorBox
import dev.zprestige.fire.settings.impl.Slider
import dev.zprestige.fire.settings.impl.Switch
import net.minecraft.util.math.Vec3d
import java.awt.Color

@Descriptor(description = "Renders where player's chorus will go")
class ChorusPredict : Module() {
    val stayTime: Slider = Menu.Slider("Stay Time (S)", 5.0f, 0.1f, 10.0f)
    val rotate: Switch = Menu.Switch("Rotate", false)
    val onlyWhileSafe: Switch = Menu.Switch("Only While Safe", true).visibility { z: Boolean? -> rotate.GetSwitch() }
    val box: Switch = Menu.Switch("Box", false)
    val boxColor: ColorBox = Menu.Color("Box Color", Color(255, 255, 255, 120)).visibility { z: Color? -> box.GetSwitch() }
    val outline: Switch = Menu.Switch("Outline", false)
    val outlineColor: ColorBox = Menu.Color("Outline Color", Color.WHITE).visibility { z: Color? -> outline.GetSwitch() }
    val outlineWidth: Slider = Menu.Slider("Outline Width", 1.0f, 0.1f, 5.0f).visibility { z: Float? -> outline.GetSwitch() }
    val chorusMap = HashMap<Vec3d, Long>()

    init {
        eventListeners = arrayOf<EventListener<*, *>>(
            ChorusListener(this),
            Frame3DListener(this)
        )
    }
}