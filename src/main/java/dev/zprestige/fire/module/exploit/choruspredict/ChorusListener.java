package dev.zprestige.fire.module.exploit.choruspredict;

import dev.zprestige.fire.Main;
import dev.zprestige.fire.event.bus.EventListener;
import dev.zprestige.fire.event.impl.ChorusEvent;
import dev.zprestige.fire.manager.playermanager.PlayerManager;
import dev.zprestige.fire.util.impl.BlockUtil;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.Vec3d;

public class ChorusListener extends EventListener<ChorusEvent, ChorusPredict> {

    public ChorusListener(final ChorusPredict chorusPredict){
        super(ChorusEvent.class, chorusPredict);
    }

    @Override
    public void invoke(final Object object){
        final ChorusEvent event = (ChorusEvent) object;
        module.chorusMap.put(new Vec3d(event.getX(), event.getY(), event.getZ()), System.currentTimeMillis());
        if (module.rotate.GetSwitch() && (BlockUtil.isPlayerSafe(new PlayerManager.Player(mc.player)) || !module.onlyWhileSafe.GetSwitch())) {
            final Vec3d min = new Vec3d(event.getX(), event.getY(), event.getZ());
            final AxisAlignedBB bb = mc.player.getEntityBoundingBox();
            final Vec3d size = new Vec3d(bb.maxX - bb.minX, bb.maxY - bb.minY, bb.maxZ - bb.minZ);
            if (module.rotate.GetSwitch() && (BlockUtil.isPlayerSafe(new PlayerManager.Player(mc.player)) || !module.onlyWhileSafe.GetSwitch())) {
                final float[] rots = Main.rotationManager.calculateAngle(new Vec3d(min.x + size.x / 2f, min.y + size.y / 2f, min.z + size.z / 2f));
                mc.player.rotationYaw = rots[0];
                mc.player.rotationPitch = rots[1];
            }
        }
    }
}
