package dev.zprestige.fire.module.exploit.phase

import dev.zprestige.fire.event.bus.EventListener
import dev.zprestige.fire.event.impl.TickEvent
import dev.zprestige.fire.module.exploit.phase.Phase.TimeVec3d
import dev.zprestige.fire.util.impl.EntityUtil
import java.util.concurrent.TimeUnit
import kotlin.math.floor

class TickListener(phase: Phase) : EventListener<TickEvent, Phase>(TickEvent::class.java, phase) {

    override fun invoke(e: Any) {
        if (mc.player == null || mc.world == null) {
            module!!.disableModule()
            return
        }
        module!!.rubberbandMap.entries.removeIf { (_, value): Map.Entry<Int?, TimeVec3d> ->
            System.currentTimeMillis() - value.time > TimeUnit.SECONDS.toMillis(30L)
        }
        var motionY: Double
        mc.player.motionZ = 0.0
        mc.player.motionY = 0.0
        mc.player.motionX = 0.0
        if (module!!.teleportId == 0) {
            if (module!!.checkPackets(4)) {
                module!!.sendPackets(0.0, 0.0, 0.0, false)
            }
            return
        }
        val phase = mc.world.getCollisionBoxes(mc.player, mc.player.entityBoundingBox).isNotEmpty()
        motionY = if (mc.player.movementInput.jump && (phase || !EntityUtil.isMoving())) {
            if (module!!.antiKick.GetSwitch() && !phase && module!!.checkPackets(20)) -0.032 else 0.062
        } else {
            if (mc.player.movementInput.sneak) -0.062 else if (!phase) if (module!!.checkPackets(4)) if (module!!.antiKick.GetSwitch()) -0.04 else 0.0 else 0.0 else 0.0
        }
        if (phase && EntityUtil.isMoving() && motionY != 0.0) {
            motionY /= 2.5
        }
        val dirSpeed = EntityUtil.getSpeed(if (phase) 0.031 else 0.26)
        var factorInt = floor(module!!.factor.GetSlider().toDouble()).toInt()
        if (Math.random() <= module!!.factor.GetSlider() - factorInt) {
            factorInt++
        }
        for (i in 1..factorInt) {
            module!!.sendPackets((dirSpeed[0] * i.also { mc.player.motionX = it.toDouble() }).toDouble(),
                motionY * i.also {
                    mc.player.motionY =
                        it.toDouble()
                },
                (dirSpeed[1] * i.also { mc.player.motionZ = it.toDouble() }).toDouble(),
                true
            )
        }
    }
}