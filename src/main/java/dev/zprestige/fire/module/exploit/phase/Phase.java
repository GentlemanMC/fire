package dev.zprestige.fire.module.exploit.phase;

import dev.zprestige.fire.module.Descriptor;
import dev.zprestige.fire.module.Module;
import dev.zprestige.fire.newbus.EventListener;
import dev.zprestige.fire.settings.impl.Slider;
import dev.zprestige.fire.settings.impl.Switch;
import io.netty.util.internal.ConcurrentSet;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.Vec3d;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;

@Descriptor(description = "Allows flying through blocks")
public class Phase extends Module {
    public final Slider factor = Menu.Slider("Factor", 1f, 0.5f, 10f);
    public final Switch antiKick = Menu.Switch("AntiKick", true);
    protected int packets = 0, teleportId = 0;
    protected final Map<Integer, TimeVec3d> rubberbandMap = new ConcurrentHashMap<>();
    protected final Set<CPacketPlayer> cPacketPlayerSet = new ConcurrentSet<>();

    public Phase() {
        eventListeners = new EventListener[]{
                new MoveListener(this),
                new PacketReceiveListener(this),
                new PacketSendListener(this),
                new TickListener(this)
        };
    }

    @Override
    public void onEnable() {
        packets = 0;
        teleportId = 0;
        cPacketPlayerSet.clear();
        rubberbandMap.clear();
    }

    protected boolean checkPackets(final int max) {
        if (packets++ >= max) {
            packets = 0;
            return true;
        }
        return false;
    }

    protected void sendPackets(double x, double y, double z, boolean teleport) {
        final Vec3d vec3d = new Vec3d(x, y, z);
        final Vec3d secondVec = mc.player.getPositionVector().add(vec3d);
        final int currentNextInt = ThreadLocalRandom.current().nextInt(29000000);
        final Vec3d thirdVec = secondVec.addVector(vec3d.x, ThreadLocalRandom.current().nextBoolean() ? currentNextInt : -currentNextInt, vec3d.z);
        sendPlayerPacket(new CPacketPlayer.Position(secondVec.x, secondVec.y, secondVec.z, mc.player.onGround));
        sendPlayerPacket(new CPacketPlayer.Position(thirdVec.x, thirdVec.y, thirdVec.z, mc.player.onGround));
        if (teleport) {
            teleportId++;
            rubberbandMap.put(teleportId, new TimeVec3d(secondVec.x, secondVec.y, secondVec.z, System.currentTimeMillis()));
            mc.player.connection.sendPacket(new CPacketConfirmTeleport(teleportId));
        }
    }

    protected void sendPlayerPacket(CPacketPlayer cPacketPlayer) {
        cPacketPlayerSet.add(cPacketPlayer);
        mc.player.connection.sendPacket(cPacketPlayer);
    }


    protected static class TimeVec3d extends Vec3d {
        protected final long time;

        public TimeVec3d(double x, double y, double z, long time) {
            super(x, y, z);
            this.time = time;
        }

        public long getTime() {
            return time;
        }
    }
}
