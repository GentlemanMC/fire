package dev.zprestige.fire.module.exploit;

import dev.zprestige.fire.Main;
import dev.zprestige.fire.events.eventbus.annotation.RegisterListener;
import dev.zprestige.fire.events.impl.FrameEvent;
import dev.zprestige.fire.events.impl.PacketEvent;
import dev.zprestige.fire.manager.PlayerManager;
import dev.zprestige.fire.module.Module;
import dev.zprestige.fire.settings.impl.*;
import dev.zprestige.fire.util.impl.RenderUtil;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;

import java.awt.*;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class ChorusManipulator extends Module {
    public final Switch autoComplete = Menu.Switch("Auto Complete", false);
    public final Slider completeDistance = Menu.Slider("Min Complete Distance", 6.0f, 0.1f, 20.0f);
    public final ColorBox boxColor = Menu.Color("Box Color", Color.WHITE);
    public final ColorBox outlineColor = Menu.Color("Outline Color", Color.WHITE);
    public final Slider lineWidth = Menu.Slider("Line Width", 1.0f, 0.1f, 5.0f);
    protected final Queue<CPacketPlayer> packets = new LinkedList<>();
    protected final Queue<CPacketConfirmTeleport> tpPackets = new LinkedList<>();
    protected BlockPos pos = null;

    @RegisterListener
    public void onPacketEvent(final PacketEvent.PacketSendEvent event) {
        if (nullCheck()) {
            if (event.getPacket() instanceof CPacketPlayer) {
                packets.add((CPacketPlayer) event.getPacket());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof CPacketConfirmTeleport) {
                tpPackets.add((CPacketConfirmTeleport) event.getPacket());
                event.setCancelled(true);
            }
        }
    }

    @RegisterListener
    public void onPacketReceive(final PacketEvent.PacketReceiveEvent event) {
        if (nullCheck()) {
            if (event.getPacket() instanceof SPacketPlayerPosLook) {
                final SPacketPlayerPosLook packet = (SPacketPlayerPosLook) event.getPacket();
                pos = new BlockPos(packet.getX(), packet.getY(), packet.getZ());
                event.setCancelled(true);
            }
        }
    }

    @RegisterListener
    public void onFrame3D(final FrameEvent.FrameEvent3D event) {
        if (pos != null) {
            final AxisAlignedBB bb = new AxisAlignedBB(pos);
            RenderUtil.drawBBBoxWithHeight(bb, boxColor.GetColor(), 2);
            RenderUtil.drawBlockOutlineBBWithHeight(bb, outlineColor.GetColor(), lineWidth.GetSlider(), 2);
            final double enemyDist = getClosestEnemyDistance(pos);
            if (autoComplete.GetSwitch() && (enemyDist > completeDistance.GetSlider() || enemyDist == 0)) {
                disableModule();
            }
        }
    }

    protected double getClosestEnemyDistance(final BlockPos pos) {
        final TreeMap<Double, PlayerManager.Player> players = Main.playerManager.getPlayers().stream().collect(Collectors.toMap(player -> player.getDistanceToPos(pos), player -> player, (a, b) -> b, TreeMap::new));
        if (!players.isEmpty()) {
            return players.firstEntry().getKey();
        }
        return 0;
    }

    @Override
    public void onDisable() {
        while (!packets.isEmpty()) {
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(packets.poll()));
        }
        while (!tpPackets.isEmpty()) {
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(tpPackets.poll()));
        }
        pos = null;
    }
}
