package dev.zprestige.fire.module.exploit;

import dev.zprestige.fire.Main;
import dev.zprestige.fire.events.eventbus.annotation.RegisterListener;
import dev.zprestige.fire.events.impl.FrameEvent;
import dev.zprestige.fire.events.impl.PacketEvent;
import dev.zprestige.fire.events.impl.TickEvent;
import dev.zprestige.fire.module.Descriptor;
import dev.zprestige.fire.module.Module;
import dev.zprestige.fire.settings.impl.*;
import dev.zprestige.fire.util.impl.RenderUtil;
import dev.zprestige.fire.util.impl.Timer;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import org.lwjgl.input.Keyboard;

import java.awt.*;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;

@Descriptor(description = "Controls when you want to teleport to your chorus fruit position")
public class ChorusManipulator extends Module {
    public final Switch rotateOnChorus = Menu.Switch("Rotate On Chorus", false);
    public final Key activateKey = Menu.Key("Activate Key", Keyboard.KEY_NONE);
    public final ColorBox boxColor = Menu.Color("Box Color", Color.WHITE);
    public final ColorBox outlineColor = Menu.Color("Outline Color", Color.WHITE);
    public final Slider lineWidth = Menu.Slider("Line Width", 1.0f, 0.1f, 5.0f);
    protected final Timer timer = new Timer();
    protected final Queue<CPacketPlayer> packets = new LinkedList<>();
    protected final Queue<CPacketConfirmTeleport> tpPackets = new LinkedList<>();
    protected boolean chorussed = false;
    protected BlockPos pos = null;

    @RegisterListener
    public void onTick(final TickEvent event) {
        if (!(mc.player.getHeldItemMainhand().getItem().equals(Items.CHORUS_FRUIT) && mc.gameSettings.keyBindUseItem.isKeyDown())) {
            timer.syncTime();
        }
        if (timer.getTime(500)) {
            chorussed = true;
        }
        if (chorussed && Keyboard.isKeyDown(activateKey.GetKey())) {
            eventBus.unregister(this);
            setEnabled(false);
            onDisable();
            eventBus.register(this);
            setEnabled(true);
            onEnable();
            Main.chatManager.sendRemovableMessage("Teleported to chorus position", 1);
        }
    }

    @RegisterListener
    public void onPacketEvent(final PacketEvent.PacketSendEvent event) {
        if (chorussed) {
            if (event.getPacket() instanceof CPacketPlayer) {
                packets.add((CPacketPlayer) event.getPacket());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof CPacketConfirmTeleport) {
                tpPackets.add((CPacketConfirmTeleport) event.getPacket());
                event.setCancelled(true);
            }
        }
    }

    @RegisterListener
    public void onPacketReceive(final PacketEvent.PacketReceiveEvent event) {
        if (chorussed) {
            if (event.getPacket() instanceof SPacketPlayerPosLook) {
                final SPacketPlayerPosLook packet = (SPacketPlayerPosLook) event.getPacket();
                pos = new BlockPos(packet.getX(), packet.getY(), packet.getZ());
                if (rotateOnChorus.GetSwitch()) {
                    final float[] rotations = Main.rotationManager.calculateAngle(new Vec3d(packet.getX(), packet.getY() + 1, packet.getZ()));
                    Main.rotationManager.setClientRotations(rotations[0], rotations[1]);
                }
                packet.yaw = mc.player.rotationYaw;
                packet.pitch = mc.player.rotationPitch;
                event.setCancelled(true);
            }
        }
    }

    @RegisterListener
    public void onFrame3D(final FrameEvent.FrameEvent3D event) {
        if (pos != null) {
            final AxisAlignedBB bb = new AxisAlignedBB(pos);
            RenderUtil.drawBBBoxWithHeight(bb, boxColor.GetColor(), 2);
            RenderUtil.drawBlockOutlineBBWithHeight(bb, outlineColor.GetColor(), lineWidth.GetSlider(), 2);
        }
    }

    @Override
    public void onDisable() {
        while (!packets.isEmpty()) {
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(packets.poll()));
        }
        while (!tpPackets.isEmpty()) {
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(tpPackets.poll()));
        }
        pos = null;
        chorussed = false;
    }
}
